{"version":3,"sources":["reducers/CatReducers.js","contexts/CatContextProvider.js","App.js","serviceWorker.js","index.js"],"names":["catReducers","state","action","type","catBreeds","data","catList","concat","moreData","catID","selectedCat","filter","el","id","CatContext","createContext","CatContextProvider","props","initState","undefined","useReducer","catsDataSource","dispatch","Provider","value","children","HOME","lazy","VIEW_CAT","App","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gJAAaA,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,aACH,OAAO,eAAKF,EAAZ,CAAmBG,UAAWF,EAAOG,OACvC,IAAK,WACH,OAAO,eAAKJ,EAAZ,CAAmBK,QAASJ,EAAOG,OACrC,IAAK,YACH,OAAO,eAAKJ,EAAZ,CAAmBK,QAASL,EAAMK,QAAQC,OAAOL,EAAOM,YAC1D,IAAK,SACH,OAAO,eAAKP,EAAZ,CAAmBQ,MAAOP,EAAOO,QACnC,IAAK,eACH,IAAMC,EAAcT,EAAMK,QAAQK,QAAO,SAAAC,GAAE,OAAIA,EAAGC,KAAOX,EAAOW,MAChE,OAAO,eAAKZ,EAAZ,CAAmBS,gBACrB,QACE,OAAOT,I,kCCXN,IAAMa,EAAaC,0BAaXC,IAXY,SAACC,GAC1B,IAAMC,EAAY,CAAEd,UAAW,GAAIE,QAAS,GAAIG,WAAOU,EAAWT,YAAa,IAD3C,EAEDU,qBAAWpB,EAAakB,GAFvB,mBAE7BG,EAF6B,KAEbC,EAFa,KAIpC,OACE,kBAACR,EAAWS,SAAZ,CAAqBC,MAAO,CAAEH,iBAAgBC,aAC3CL,EAAMQ,Y,0KCHPC,EAAOC,gBAAK,kBAAM,8DAClBC,EAAWD,gBAAK,kBAAM,uDAiBbE,MAff,WACE,OACE,kBAACb,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUc,SAAU,4CAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWP,IAC3C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,iBAAiBC,UAAWL,SCNtCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19ee7740.chunk.js","sourcesContent":["export const catReducers = (state, action) => {\r\n  switch (action.type) {\r\n    case 'GET_BREEDS':\r\n      return { ...state, catBreeds: action.data };\r\n    case 'GET_CATS':\r\n      return { ...state, catList: action.data };\r\n    case 'LOAD_MORE':\r\n      return { ...state, catList: state.catList.concat(action.moreData) };\r\n    case 'CAT_ID':\r\n      return { ...state, catID: action.catID };\r\n    case 'SELECTED_CAT':\r\n      const selectedCat = state.catList.filter(el => el.id === action.id);\r\n      return { ...state, selectedCat };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport { catReducers } from '../reducers/CatReducers';\r\n\r\nexport const CatContext = createContext();\r\n\r\nconst CatContextProvider = (props) => {\r\n  const initState = { catBreeds: [], catList: [], catID: undefined, selectedCat: {} }\r\n  const [catsDataSource, dispatch] = useReducer(catReducers, initState)\r\n\r\n  return (\r\n    <CatContext.Provider value={{ catsDataSource, dispatch }}>\r\n      {props.children}\r\n    </CatContext.Provider>\r\n  );\r\n}\r\n\r\nexport default CatContextProvider;","import React, { lazy, Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport CatContextProvider from './contexts/CatContextProvider';\n\nconst HOME = lazy(() => import('./pages/Home'));\nconst VIEW_CAT = lazy(() => import('./pages/ViewCat'));\n\nfunction App() {\n  return (\n    <CatContextProvider>\n      <Router>\n        <Switch>\n          <Suspense fallback={<div>LOADING...</div>}>\n            <Route exact path='/test-iona/' component={HOME} />\n            <Route exact path='/test-iona/:id' component={VIEW_CAT} />\n          </Suspense>\n        </Switch>\n      </Router>\n    </CatContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}